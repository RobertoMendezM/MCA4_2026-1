# -*- coding: utf-8 -*-
"""MN_Runge-Kutta_3erOrden_v1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NiNyHtmj_P-kxyH144p5YWM4ugMekUiq

# <h1 align="center"> Runge kutta Explícito </h1>
#  <h1 align="center"> de tercer orden </h1>

## Dada la EDO con condiciones de Cauchy  
\begin{align*}
y' &= f(t, y) \\
y(t_0) &= y_0
\end{align*}
## La solución numérica de y(t) se calcula mediante
\begin{align*}
k1 &= f(t_{i-1}, y_{i-1}) \\
k2 &= f(t_{i-1} + h, y_{i-1} + h*k1) \\
k3 &= f\left(t_{i-1} + \frac{h}{2}, y_{i-1} + \frac{h}{2}*\frac{k1 + k2}{2}\right) \\
y_i &= y_{i-1} + \frac{h}{6}(k1 + k2 + 4*k3) \\
\end{align*}
## con *h* el tamaño de paso, e $i = 1,2, … , n$


----
Referencias:
* Corless & Fillion (2013). A Graduate Introduction to Numerical Methods, Springer.

---

Autor: Roberto Méndez Méndez

Editado: 27 Ago 24

### Caso 1) Solución númerica de la EDO

\begin{equation}
\frac{dy}{dt} = -cy
\end{equation}
### Dado que f(t,y) = -cy, este RK toma la forma
\begin{align*}
k1 &= -c*y_{i-1} \\
k2 &= -c(y_{i-1} + h*k1) \\
k3 &= -c\left(y_{i-1} + h*\frac{k1 + k2}{4}\right) \\
y_i &= y_{i-1} + \frac{h}{6}(k1 + k2 + 4*k3) \\
\end{align*}
"""

import numpy as np
import matplotlib.pyplot as plt

x0 = 1
xf = 3
y0 = 2
c = 15
h = 0.1
t = np.arange(x0, xf, h)

y = np.zeros(len(t))
y[0] = y0

# Método númerico Runge-Kutta
for i in range(len(t) - 1):
    k1 = -c*y[i]
    k2 = -c*(y[i] + h*k1)
    k3 = -c*(y[i] + h*(k1 + k2)/4)
    y[i+1] = y[i] + h*(k1 + k2 + 4*k3)/6

# Solución analítica
solExac = y0*np.exp(c*x0)*np.exp(-c*t)


# Gráficas
plt.plot(t, y, 'green', linestyle="-", linewidth=3 )
plt.plot(t, solExac, 'orange', linestyle="--", linewidth=2)
plt.xlabel('t')
plt.ylabel('y_n')
plt.legend(['Euler', 'Analítica'] )
plt.show()